<?php
/**
 * @file
 * Custom functionality to add email addresses to CLO
 */

/**
 * Implements hook_help().
 */
function convio_signup_help($path, $arg) {
  switch ($path) {
    case 'admin/help#convio_signup':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("This module allows admins to create email signup form blocks to include on other pages. The blocks contain a simple form which will add an email address to the constituent database in Blackbaud's Convio Luminate Online product.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function convio_signup_permission() {
  return array(
    'administer convio signup' => array(
      'title' => t('Administer Convio Signup'),
      'description' => t('Perform administrative tasks on Convio Signup forms.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function convio_signup_block_info() {
  $blocks = array();

  $result = db_query('SELECT form_id, name, description from {convio_signup}');
  foreach ($result as $item) {
    $blocks[$item->form_id] = array(
      'title' => $item->name,
      'info' => $item->description,
      'cache' => DRUPAL_CACHE_GLOBAL,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_configure.
 */
function convio_signup_block_configure($delta = '') {

  $result = db_query('SELECT * from {convio_signup} WHERE form_id = :delta', array(':delta' => $delta))->fetchObject();

  if ($result) {
    $form['overview'] = array(
      '#markup' => t('Edit a Convio Signup Form block by changing the values below.'),
    );

    $form['name'] = array(
      '#title' => t('Convio Signup Form name'),
      '#type' => 'textfield',
      '#size' => 30,
      '#maxlength' => 512,
      '#default_value' => $result->name,
    );

    $form['description'] = array(
      '#title' => t('A brief description of the Convio Signup Form block'),
      '#type' => 'textfield',
      '#size' => 120,
      '#maxlength' => 1024,
      '#required' => TRUE,
      '#default_value' => $result->description,
    );

    $form['email_field_placeholder'] = array(
      '#title' => t('Email field placeholder'),
      '#description' => t("The text that displays inside the email field before the user enters their email address."),
      '#type' => 'textfield',
      '#size' => 30,
      '#maxlength' => 512,
      '#default_value' => $result->email_field_placeholder,
    );

    $form['helper_text'] = array(
      '#title' => t('User Helper Text'),
      '#description' => t('Text that instucts the user how to use the form.'),
      '#type' => 'textfield',
      '#size' => 30,
      '#maxlength' => 255,
      '#default_value' => $result->helper_text,
    );

    $form['submission_success_msg'] = array(
      '#title' => t('Email submission success message:'),
      '#description' => t('Text that appears after the user successfully submits their email address. Defaults to "Thanks! We\'ll be in touch soon!"'),
      '#type' => 'textfield',
      '#size' => 30,
      '#maxlength' => 255,
      '#default_value' => $result->submission_success_msg,
    );

    $form['source'] = array(
      '#title' => t('Source:'),
      '#description' => t('Text to associate with newly created constituent records to identify how or from where the record was added.'),
      '#type' => 'textfield',
      '#size' => 30,
      '#maxlength' => 255,
      '#default_value' => $result->source,
    );

    $form['sub_source'] = array(
      '#title' => t('Subsource:'),
      '#description' => t('Further detail to save with the "source" information.'),
      '#type' => 'textfield',
      '#size' => 30,
      '#maxlength' => 255,
      '#default_value' => $result->sub_source,
    );

    $form['submit_button_text'] = array(
      '#title' => t("Submit button text"),
      '#description' => t("What should the button the user clicks to submit their email address say? Defaults to 'Submit'."),
      '#type' => 'textfield',
      '#size' => 30,
      '#maxlength' => 255,
      '#default_value' => $result->submit_button_text,
    );

    return $form;
  }
}

/**
 * Implements hook_block_save().
 */
function convio_signup_block_save($delta = '', $edit = array()) {
  $data = array(
    'form_id' => $delta,
    'name' => ($edit['name']) ? ($edit['name']) : NULL,
    'description' => ($edit['description']) ? ($edit['description']) : NULL,
    'email_field_placeholder' => ($edit['email_field_placeholder']) ? $edit['email_field_placeholder'] : NULL,
    'helper_text' => ($edit['helper_text']) ? $edit['helper_text'] : NULL,
    'submission_success_msg' => ($edit['submission_success_msg']) ? $edit['submission_success_msg'] : NULL,
    'source' => ($edit['source']) ? $edit['source'] : NULL,
    'sub_source' => ($edit['sub_source']) ? $edit['sub_source'] : NULL,
    'submit_button_text' => ($edit['submit_button_text']) ? $edit['submit_button_text'] : NULL,
  );

  drupal_write_record('convio_signup', $data, 'form_id');
}

/**
 * Implements hook_menu().
 */
function convio_signup_menu() {
  $items = array();

  $items['admin/structure/convio_signup'] = array(
    'title' => 'Convio Signup Forms Configuration',
    'description' => 'View, create, edit and delete Convio Signup Forms',
    'page callback' => 'convio_signup_admin',
    'access arguments' => array('administer convio signup'),
  );

  $items['admin/structure/convio_signup/add'] = array(
    'title' => 'Create Convio Signup Form',
    'description' => 'Create a Convio Signup Form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convio_signup_add'),
    'access arguments' => array('administer convio signup'),
  );

  $items['admin/structure/convio_signup/%/delete'] = array(
    'title' => 'Delete a Convio Signup Form',
    'description' => 'Delete a Convio Signup Form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convio_signup_delete', 3),
    'access arguments' => array('administer convio signup'),
  );

  return $items;
}

/**
 * Prepares a table containing the details and actions of all Convio Signup forms.
 */
function convio_signup_admin() {

  $results = db_query("SELECT form_id, name, description FROM {convio_signup}");

  foreach ($results as $row) {
    $actions = array(
      'configure' => l(t('Configure'), sprintf('admin/structure/block/manage/convio_signup/%d/configure', $row->form_id)),
      'delete'    => l(t('Delete'), sprintf('admin/structure/convio_signup/%d/delete', $row->form_id)),
    );

    $rows[] = array(
      'id'   => $row->form_id,
      'name' => $row->name,
      'description' => $row->description,
      'ops'  => implode(' | ', $actions),
    );
  }

  $table = '';
  if (!empty($rows)) {
    $header = array(
      'id'   => t('Block ID'),
      'name' => t('Name'),
      'desc' => t('Description'),
      'ops'  => t('Operations'),
    );
    $table = theme('table', array('header' => $header, 'rows' => $rows));
  }

  $create_form_button = l(t('Create a Convio Signup Form block'), 'admin/structure/convio_signup/add', array('attributes' => array('class' => array('button'))));
  $convio_api_config_button = l(t('Configure the connection to Convio'), 'admin/config/system/convio_api_config', array('attributes' => array('class' => array('button'))));

  return $table . $create_form_button . $convio_api_config_button;
}

/**
 * A form for creating a new Convio Signup form.
 *
 * @param $form array
 *   The Convio Signup form
 *
 * @param $form_state
 *   The Convio Signup form state
 *
 * @return mixed
 *   A form used to create a new Convio Signup form.
 */
function convio_signup_add($form, &$form_state) {

  $form['overview'] = array(
    '#markup' => t('Create a new Convio Signup Form block by filling out and submitting the form below.'),
  );

  $form['name'] = array(
    '#title' => t('Convio Signup Form name'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 512,
  );

  $form['description'] = array(
    '#title' => t('A brief description of the Convio Signup Form block'),
    '#type' => 'textfield',
    '#size' => 120,
    '#maxlength' => 1024,
    '#required' => TRUE
  );

  $form['email_field_placeholder'] = array(
    '#title' => t('Email field placeholder'),
    '#description' => t("The text that displays inside the email field before the user enters their email address."),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 512,
  );

  $form['helper_text'] = array(
    '#title' => t('User Helper Text'),
    '#description' => t('Text that instucts the user how to use the form.'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 255,
  );

  $form['submission_success_msg'] = array(
    '#title' => t('Email submission success message:'),
    '#description' => t('Text that appears after the user successfully submits their email address. Defaults to "Thanks! We\'ll be in touch soon!"'),
    '#type' => 'textfield',
    '#attributes' => array(
      'placeholder' => "Thanks! We'll be in touch soon!",
    ),
    '#size' => 30,
    '#maxlength' => 255,
  );

  $form['source'] = array(
    '#title' => t('Source:'),
    '#description' => t('Text to associate with newly created constituent records to identify how or from where the record was added.'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 255,
  );

  $form['sub_source'] = array(
    '#title' => t('Subsource:'),
    '#description' => t('Further detail to save with the "source" information.'),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 255,
  );

  $form['submit_button_text'] = array(
    '#title' => t("Submit button text"),
    '#description' => t("What should the button the user clicks to submit their email address say? Defaults to 'Submit'."),
    '#type' => 'textfield',
    '#size' => 30,
    '#maxlength' => 255,
    '#attributes' => array(
      'placeholder' => 'Submit',
    ),
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Submit'),
  );
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'admin/structure/convio_signup'),
  );

  return $form;
}

function convio_signup_add_submit($form, &$form_state) {
  $values = $form_state['values'];

  $data = array(
    'name' => ($values['name']) ? ($values['name']) : NULL,
    'description' => ($values['description']) ? ($values['description']) : NULL,
    'email_field_placeholder' => ($values['email_field_placeholder']) ? ($values['email_field_placeholder']) : NULL,
    'helper_text' => ($values['helper_text']) ? ($values['helper_text']) : NULL,
    'submission_success_msg' => ($values['submission_success_msg']) ? $values['submission_success_msg'] : NULL,
    'source' => ($values['source']) ? $values['source'] : NULL,
    'sub_source' => ($values['sub_source']) ? $values['sub_source'] : NULL,
    'submit_button_text' => ($values['submit_button_text']) ? $values['submit_button_text'] : NULL,
  );

  $result = drupal_write_record('convio_signup', $data);

  if ($result) {
    drupal_set_message('Your signup form has been created');
  }
  else {
    drupal_set_message('There was an error creating your signup form', 'error');
  }

  drupal_goto('admin/structure/convio_signup');
}

function convio_signup_delete($form, &$form_state, $form_id) {
  $result = db_query("SELECT name, description FROM {convio_signup} where form_id = :form_id", array(':form_id' => $form_id))->fetchObject();
  $form['warning'] = array(
    '#markup' => '<h2>You are about to delete the following Convio Signup Form:' . $result->description . '. This cannot be undone!</h2>'
  );

  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Delete'),
  );
  $form['actions']['cancel'] = array(
    '#markup' => l(t('Cancel'), 'admin/structure/convio_signup'),
  );
  return $form;
}

function convio_signup_delete_submit($form, &$form_state) {
  $form_id = $form_state['build_info']['args'][0];
  convio_signup_remove($form_id);
  drupal_goto('admin/structure/convio_signup');
}

function convio_signup_remove($form_id) {
  $res = db_query('DELETE from {convio_signup} WHERE form_id = :form_id', array(':form_id' => $form_id));
  if ($res) {
    drupal_set_message('The Convio signup form has been deleted.');
  }
  else {
    drupal_set_message('There was an error deleting the signup form.', 'error');
  }
  $res = db_query("DELETE from {block} WHERE module = 'convio_signup' AND delta = :form_id", array(':form_id' => $form_id));
  if (!$res) {
    drupal_set_message('There was an error deleting the form from the blocks table.', 'error');
  }
}


/*
 * Client-side functions
 */

/**
 * Implements hook_block_view().
 */
function convio_signup_block_view($delta = '') {
  $result = db_query("SELECT * from {convio_signup} WHERE form_id = :delta", array(':delta' => $delta))->fetchObject();
  if ($result) {
    return array(
      'content' => drupal_get_form('convio_signup_block_form', $result)
    );
  }
}

/**
 * Builds email submission form.
 */
function convio_signup_block_form($form, &$form_state, $form_data) {

  $form['#attributes']['class'][] = 'convio-signup-form';
  $form['constituent_email_address'] = array(
    '#type' => 'textfield',
    '#description' => $form_data->helper_text,
    '#required' => TRUE,
    '#maxlength' => 254,
    '#size' => 14,
  );

  $placeholder_txt = $form_data->email_field_placeholder;
  if (!empty($placeholder_txt)) {
    $form['constituent_email_address']['#attributes']['placeholder'] = $placeholder_txt;
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => ($form_data->submit_button_text) ? check_plain($form_data->submit_button_text) : 'Submit',
  );

  $form['submit']['#ajax'] = array(
    "callback" => "convio_signup_form_callback",
    "wrapper" => "convio_signup_ajax_wrapper",
    "effect" => "fade",
    "speed" => "slow",
    "progress" => array('type' => 'none'),
  );

  $form['wrapper'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="convio_signup_ajax_wrapper">',
    '#suffix' => '</div>',
  );

  $form['#attached']['js'] = array(
    array(
      'type'  => 'file',
      'data' => drupal_get_path('module', 'convio_signup') . '/js/resultsReturned.js',
    ),
  );

  if (!empty($form_data->source)) {
    $form['source'] = array(
      '#type' => 'value',
      '#value' => $form_data->source,
    );
  }

  if (!empty($form_data->sub_source)) {
    $form['sub_source'] = array(
      '#type' => 'value',
      '#value' => $form_data->sub_source,
    );
  }

  return $form;
}

/**
 * Validates user input after a submission of the email signup form.
 */
function convio_signup_block_form_validate($form, &$form_state) {

  $constituent_email_address = $form_state['values']['constituent_email_address'];
  if (empty($constituent_email_address)) {
    watchdog("convio_signup", "Blank email address submitted.");
    form_set_error('constituent_email_address', "Please enter an email address.");
    return;
  }

  try {
    $is_valid_email_response = convio_api_isEmailValid_request($constituent_email_address);
    if ($is_valid_email_response["isEmailValidResponse"]["valid"] === "false") {
      watchdog("convio_signup", "Invalid email address submitted: '$constituent_email_address''");
      form_set_error('constituent_email_address', "The email address is invalid.");
    }
  }
  catch (Exception $e) {
    form_set_error('', $e->getMessage());
  }
}

/**
 * Backs up the submitted email address to the Drupal database, and adds the address to the CLO database via the Convio API.
 */
function convio_signup_block_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  $new_email_address = $form_values['constituent_email_address'];
  $submission_id = backup_email_address($new_email_address);

  $optional_params = array();
  if (!empty($form_values['source'])) {
    $optional_params += array("source" => $form_values['source']);
  }

  if (!empty($form_values['sub_source'])) {
    $optional_params += array("sub_source" => $form_values['sub_source']);
  }

  try {
    $response = convio_api_createOrUpdate_request($new_email_address, $optional_params);
  }
  catch (Exception $e) {
    form_set_error('', "There was an error submitting your email address!");
    return;
  }

  update_email_list_signups_record('constituent_record_id', $response['createOrUpdateConsResponse']['cons_id'], $submission_id);
}

/**
 * Backs up the submitted email address and other data to the Drupal database.
 */
function backup_email_address($email_address) {
  return db_insert('email_list_signups')
    ->fields(array(
      'email_address_submitted' => $email_address,
      'submission_time' => date("Y-m-d H:i:s", REQUEST_TIME),
      'submission_source_url' => current_path(),
    ))
    ->execute();
}

function convio_signup_form_callback($form, $form_state) {

  if (form_get_errors()) {
    return "<div id='convio_signup_ajax_wrapper'></div>";
  }
  else {
    $commands = array();
    $status_message = "Thanks! We'll be in touch soon!";
    $response = array(
      '#markup' => $status_message,
    );
    $commands[] = ajax_command_html('#convio_signup_ajax_wrapper', render($response));
    $commands[] = array('command' => 'fadeAwayStatusMessage');

    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
}

/**
 * Store the constituent record ID which was created by CLO in the Drupal database.
 */
function update_email_list_signups_record($field, $value, $submission_id) {
  return db_update('email_list_signups')
    ->fields(array(
      $field => $value,
    ))
    ->condition('submission_id', $submission_id)
    ->execute();
}
