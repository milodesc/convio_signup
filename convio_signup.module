<?php
/**
 * @file
 * Custom functionality to add email addresses to CLO.
 *
 * Using this module you can create email signup blocks that
 * will use the Convio API to create records in the Convio
 * Luminate Online database.
 */

/**
 * Implements hook_help().
 */
function convio_signup_help($path, $arg) {
  switch ($path) {
    case 'admin/help#convio_signup':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("This module allows admins to create email signup form blocks to include on other pages. The blocks contain a simple form which will add an email address to the constituent database in Blackbaud's Convio Luminate Online product.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function convio_signup_permission() {
  return array(
    'administer convio signup' => array(
      'title' => t('Administer Convio Signup'),
      'description' => t('Create, configure and delete Convio Signup Form blocks.'),
    ),
  );
}

/**
 * Implements hook_block_info().
 */
function convio_signup_block_info() {
  $blocks = array();

  $result = db_query('SELECT form_id, title, description from {convio_signup}');
  foreach ($result as $item) {
    $blocks[$item->form_id] = array(
      'title' => $item->title,
      'info' => $item->description,
      'cache' => DRUPAL_CACHE_GLOBAL,
    );
  }
  return $blocks;
}

/**
 * Implements hook_block_configure.
 */
function convio_signup_block_configure($delta = '') {
  $form = array();
  $result = db_query('SELECT * from {convio_signup} WHERE form_id = :delta', array(':delta' => $delta))->fetchObject();

  if ($result) {
    $form['overview'] = array(
      '#markup' => t('Edit a Convio Signup Form block by changing the values below.'),
    );

    $form['title'] = array(
      '#title' => t('Convio Signup Form block title'),
      '#type' => 'textfield',
      '#size' => 30,
      '#maxlength' => 512,
      '#default_value' => $result->title,
    );

    $form['description'] = array(
      '#title' => t('A brief description of the Convio Signup Form block'),
      '#type' => 'textfield',
      '#size' => 120,
      '#maxlength' => 1024,
      '#required' => TRUE,
      '#default_value' => $result->description,
    );

    $form['email_field_placeholder'] = array(
      '#title' => t('Email field placeholder'),
      '#description' => t("The text that displays inside the email field before the user enters their email address."),
      '#type' => 'textfield',
      '#size' => 30,
      '#maxlength' => 512,
      '#default_value' => $result->email_field_placeholder,
    );

    $form['helper_text'] = array(
      '#title' => t('User Helper Text'),
      '#description' => t('Text that instucts the user how to use the form.'),
      '#type' => 'textfield',
      '#size' => 30,
      '#maxlength' => 255,
      '#default_value' => $result->helper_text,
    );

    $form['submission_success_msg'] = array(
      '#title' => t('Email submission success message:'),
      '#description' => t('Text that appears after the user successfully submits their email address. Defaults to "Thanks! We\'ll be in touch soon!"'),
      '#type' => 'textfield',
      '#size' => 30,
      '#maxlength' => 255,
      '#default_value' => $result->submission_success_msg,
      '#attributes' => (array('placeholder' => 'Thanks! We\'ll be in touch soon!')),
    );

    $form['source'] = array(
      '#title' => t('Source:'),
      '#description' => t('Text to associate with newly created constituent records to identify how or from where the record was added.'),
      '#type' => 'textfield',
      '#size' => 30,
      '#maxlength' => 255,
      '#default_value' => $result->source,
    );

    $form['sub_source'] = array(
      '#title' => t('Subsource:'),
      '#description' => t('Further detail to save with the "source" information.'),
      '#type' => 'textfield',
      '#size' => 30,
      '#maxlength' => 255,
      '#default_value' => $result->sub_source,
    );

    $form['submit_button_text'] = array(
      '#title' => t("Submit button text"),
      '#description' => t("What should the button the user clicks to submit their email address say? Defaults to 'Submit'."),
      '#type' => 'textfield',
      '#size' => 30,
      '#maxlength' => 255,
      '#default_value' => $result->submit_button_text,
    );
  }

  return $form;
}

/**
 * Implements hook_block_save().
 */
function convio_signup_block_save($delta = '', $edit = array()) {
  $data = array(
    'form_id' => $delta,
    'title' => ($edit['title']) ? ($edit['title']) : NULL,
    'description' => ($edit['description']) ? ($edit['description']) : NULL,
    'email_field_placeholder' => ($edit['email_field_placeholder']) ? $edit['email_field_placeholder'] : NULL,
    'helper_text' => ($edit['helper_text']) ? $edit['helper_text'] : NULL,
    'submission_success_msg' => ($edit['submission_success_msg']) ? $edit['submission_success_msg'] : NULL,
    'source' => ($edit['source']) ? $edit['source'] : NULL,
    'sub_source' => ($edit['sub_source']) ? $edit['sub_source'] : NULL,
    'submit_button_text' => ($edit['submit_button_text']) ? $edit['submit_button_text'] : NULL,
  );

  drupal_write_record('convio_signup', $data, 'form_id');
}

/**
 * Implements hook_menu().
 */
function convio_signup_menu() {
  $items = array();

  $items['admin/structure/convio_signup'] = array(
    'title' => 'Convio Signup Forms Configuration',
    'description' => 'View, create, edit and delete Convio Signup Forms',
    'page callback' => 'convio_signup_admin',
    'access arguments' => array('administer convio signup'),
    'file' => 'convio_signup.admin.inc',
  );

  $items['admin/structure/convio_signup/add'] = array(
    'title' => 'Create Convio Signup Form',
    'description' => 'Create a Convio Signup Form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convio_signup_add'),
    'access arguments' => array('administer convio signup'),
    'file' => 'convio_signup.admin.inc',
  );

  $items['admin/structure/convio_signup/%/delete'] = array(
    'title' => 'Delete a Convio Signup Form',
    'description' => 'Delete a Convio Signup Form',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('convio_signup_delete', 3),
    'access arguments' => array('administer convio signup'),
    'file' => 'convio_signup.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_block_view().
 */
function convio_signup_block_view($delta = '') {
  $result = db_query("SELECT * from {convio_signup} WHERE form_id = :delta", array(':delta' => $delta))->fetchObject();
  if ($result) {
    return array('content' => drupal_get_form('convio_signup_block_form', $result));
  }
}

/**
 * Form constructor for the Convio Signup Block form.
 *
 * @param object $form_data
 *   The custom options for this form's display and functionality.
 *
 * @see convio_signup_block_form_validate()
 * @see convio_signup_block_form_submit()
 *
 * @ingroup forms
 */
function convio_signup_block_form($form, &$form_state, $form_data) {

  $form_state['storage']['form_id'] = $form_data->form_id;

  $form['#attributes']['class'][] = 'convio-signup-form';
  $form['constituent_email_address'] = array(
    '#type' => 'textfield',
    '#description' => $form_data->helper_text,
    '#required' => TRUE,
    '#maxlength' => 254,
    '#size' => 14,
  );

  $placeholder_txt = $form_data->email_field_placeholder;
  if (!empty($placeholder_txt)) {
    $form['constituent_email_address']['#attributes']['placeholder'] = $placeholder_txt;
  }

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => ($form_data->submit_button_text) ? check_plain($form_data->submit_button_text) : 'Submit',
  );

  $form['submit']['#ajax'] = array(
    "callback" => "convio_signup_form_callback",
    "wrapper" => "convio_signup_ajax_results_wrapper_" . $form_data->form_id,
    "effect" => "fade",
    "speed" => "slow",
    "progress" => array('type' => 'none'),
  );

  $form['wrapper'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="convio_signup_ajax_results_wrapper_' . $form_data->form_id . '">',
    '#suffix' => '</div>',
  );

  $form['#attached']['js'] = array(
    array(
      'type'  => 'file',
      'data' => drupal_get_path('module', 'convio_signup') . '/js/resultsReturned.js',
    ),
  );

  if (!empty($form_data->source)) {
    $form['source'] = array(
      '#type' => 'value',
      '#value' => $form_data->source,
    );
  }

  if (!empty($form_data->sub_source)) {
    $form['sub_source'] = array(
      '#type' => 'value',
      '#value' => $form_data->sub_source,
    );
  }

  if (!empty($form_data->submission_success_msg)) {
    $form['submission_success_msg'] = array(
      '#type' => 'value',
      '#value' => $form_data->submission_success_msg,
    );
  }

  return $form;
}

/**
 * Form validation handler for convio_signup_block_form().
 *
 * @see convio_signup_block_form_submit()
 */
function convio_signup_block_form_validate($form, &$form_state) {

  $constituent_email_address = $form_state['values']['constituent_email_address'];
  if (empty($constituent_email_address)) {
    watchdog("convio_signup", "Blank email address submitted.", array(), WATCHDOG_INFO);
    form_set_error('', "Please enter an email address.");
    return;
  }

  try {
    $is_valid_email_response = convio_api_isEmailValid_request($constituent_email_address);
    if ($is_valid_email_response["isEmailValidResponse"]["valid"] === "false") {
      watchdog("convio_signup", "Invalid email address submitted: '$constituent_email_address'", array(), WATCHDOG_INFO);
      form_set_error('', "The email address is invalid.");
    }
  }
  catch (Exception $e) {
    form_set_error('', "There was an error submitting your email address!");
  }
}

/**
 * Form submission handler for convio_signup_block_form().
 *
 * Backs up the email address and adds it to Convio's database via the API.
 *
 * @see convio_signup_block_form_validate()
 */
function convio_signup_block_form_submit($form, &$form_state) {
  $form_values = $form_state['values'];
  $new_email_address = $form_values['constituent_email_address'];
  $submission_id = backup_email_address($new_email_address);

  $optional_params = array();
  if (!empty($form_values['source'])) {
    $optional_params += array("source" => $form_values['source']);
  }

  if (!empty($form_values['sub_source'])) {
    $optional_params += array("sub_source" => $form_values['sub_source']);
  }

  try {
    $response = convio_api_createOrUpdate_request($new_email_address, $optional_params);
  }
  catch (Exception $e) {
    form_set_error('', "There was an error submitting your email address!");
    return;
  }

  update_convio_signup_email_address_backup('constituent_record_id', $response['createOrUpdateConsResponse']['cons_id'], $submission_id);
}

/**
 * Backs up the submitted email address and other data to the Drupal database.
 *
 * @param string $email_address
 *   The email address to backup.
 *
 * @returns int
 *   The last insert ID of the query, if one exists.
 */
function backup_email_address($email_address) {
  return db_insert('convio_signup_email_address_backup')
    ->fields(array(
      'email_address_submitted' => $email_address,
      'submission_time' => date("Y-m-d H:i:s", REQUEST_TIME),
      'submission_source_url' => current_path(),
    ))
    ->execute();
}

/**
 * Callback for convio_signup_block_form().
 *
 * @ingroup callbacks
 */
function convio_signup_form_callback($form, $form_state) {

  $target = $form['submit']['#ajax']['wrapper'];
  if (form_get_errors()) {
    return "<div id='" . $target . "'></div>";
  }
  else {
    $commands = array();
    $status_message = empty($form_state['values']['submission_success_msg']) ? "Thanks! We'll be in touch soon!" : $form_state['values']['submission_success_msg'];
    $response = array(
      '#markup' => $status_message,
    );
    $commands[] = ajax_command_html("#" . $target, render($response));
    $commands[] = array('command' => 'fadeAwayStatusMessage');

    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }
}

/**
 * Store the constituent ID created by Convio in the Drupal database.
 */
function update_convio_signup_email_address_backup($field, $value, $submission_id) {
  return db_update('convio_signup_email_address_backup')
    ->fields(array(
      $field => $value,
    ))
    ->condition('submission_id', $submission_id)
    ->execute();
}
