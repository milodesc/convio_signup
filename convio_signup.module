<?php
/**
 * @file
 * Custom functionality to add email addresses to CLO
 */

module_load_include('inc', 'convio_signup');

/**
 * Implements hook_block_info().
 */
function convio_signup_block_info() {
  $blocks['Convio Email Signup'] = array(
    'info' => t('Convio Email Signup'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function convio_signup_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'Convio Email Signup':
      $block['subject'] = NULL;
      $block['content'] = drupal_get_form('convio_signup_block_form');
      break;
  }
  return $block;
}

/**
 * Builds email submission form.
 */
function convio_signup_block_form($form, &$form_state) {
  $form = array();

  $form['constituent_email_address'] = array(
    '#type' => 'textfield',
    '#description' => variable_get('convio_signup_default_helper_text'),
    '#required' => TRUE,
    '#maxlength' => 254,
    '#size' => 14,
  );

  $placeholder_txt = variable_get('convio_signup_default_placeholder');
  if (!empty($placeholder_txt)) {
    $form['constituent_email_address']['#attributes'] = array(
      'placeholder' => variable_get('convio_signup_default_placeholder'),
    );
  }

  $submit_button_text = variable_get('convio_signup_submit_button_text');
  $submit_button_image_fid = variable_get('convio_signup_submit_button_image');
  $submit_button_image_rollover_fid = variable_get('convio_signup_submit_button_image_rollover');
  if ((variable_get('convio_signup_submit_button_radio', 0) === 0) || empty($submit_button_image_fid)) {
    $form['submit'] = array(
      '#type' => 'submit',
      '#value' => empty($submit_button_text) ? "Submit" : $submit_button_text,
    );
  }
  else {
    $form['submit'] = array(
      '#type' => 'image_button',
      '#src' => file_create_url(file_load($submit_button_image_fid)->uri),
    );
    if (!empty($submit_button_image_rollover_fid)) {
      file_load($submit_button_image_fid)->uri;
      $form['submit']['#attributes'] = array(
        'onmouseover' => "this.src='" . file_create_url(file_load($submit_button_image_rollover_fid)->uri) . "'",
        'onmouseout' => "this.src='" . file_create_url(file_load($submit_button_image_fid)->uri) . "'",
      );
    }
  }
  $form['submit']['#ajax'] = array(
    "callback" => "convio_signup_form_callback",
    "wrapper" => "convio_signup_ajax_wrapper",
    "effect" => "fade",
    "speed" => "slow",
    "progress" => array('type' => 'none'),
  );

  $form['wrapper'] = array(
    '#type' => 'markup',
    '#prefix' => '<div id="convio_signup_ajax_wrapper">',
    '#suffix' => '</div>',
  );

  $form['#attached']['js'] = array(
    array(
      'type'  => 'file',
      'data' => drupal_get_path('module', 'convio_signup') . '/js/resultsReturned.js',
    ),
  );

  return $form;
}

/**
 * Validates user input.
 */
function convio_signup_block_form_validate($form, &$form_state) {
  form_clear_error();
  $constituent_email_address = $form_state['values']['constituent_email_address'];
  if (empty($constituent_email_address) || !valid_email_address($constituent_email_address)) {
    watchdog("convio_signup", "invalid email address submitted: '$constituent_email_address''");
    form_set_error('constituent_email_address', "Invalid email address.");
  }
}

/**
 * Adds email address to CLO database via form submission.
 */
function convio_signup_block_form_submit($form, &$form_state) {
  $new_email_address = $form_state['values']['constituent_email_address'];
  $submission_id = backup_email_address($new_email_address);

  $response = convio_api_createOrUpdate_request($new_email_address);
  $response_data = (!empty($response->data)) ? drupal_json_decode($response->data) : "";
  if (!empty($response->error)) {
    $create_or_update_unsuccessful = 'There was an error. ';
    if (!empty($response_data)) {
      form_set_error('', $create_or_update_unsuccessful . $response_data['errorResponse']['message']);
    }
    else {
      form_set_error('', $create_or_update_unsuccessful . "Check the API Base URL and Name of Organization fields on the Convio API Configuration screen.");
    }
    return;
  }
  else {
    $data = $response_data['createOrUpdateConsResponse'];
    update_email_list_signups_record('constituent_record_id', $data['cons_id'], $submission_id);
  }
}

/**
 * Backs up the email address and other data to the Drupal database.
 */
function backup_email_address($email_address) {
  return db_insert('email_list_signups')
    ->fields(array(
      'email_address_submitted' => $email_address,
      'submission_time' => date("Y-m-d H:i:s", REQUEST_TIME),
      'submission_source_url' => current_path(),
    ))
    ->execute();
}

/**
 * Store the constituent record ID which was created by CLO in the Drupal database.
 */
function update_email_list_signups_record($field, $value, $submission_id) {
  return db_update('email_list_signups')
    ->fields(array(
      $field => $value,
    ))
    ->condition('submission_id', $submission_id)
    ->execute();
}

function convio_signup_form_callback($form, $form_state) {

  if (form_get_errors()) {
    return "<div id='convio_signup_ajax_wrapper'></div>";
  }
  else {
    $commands = array();
    $status_message = variable_get('convio_signup_submission_success_message');
    $status_message = (empty($status_message)) ? "Thanks! We'll be in touch soon!" : $status_message;
    $response = array(
      '#markup' => $status_message,
    );
    $commands[] = ajax_command_html('#convio_signup_ajax_wrapper', render($response));
    $commands[] = array('command' => 'fadeAwayStatusMessage');

    return array(
      '#type' => 'ajax',
      '#commands' => $commands,
    );
  }

}















/**
 * Implements hook_help().
 */
function convio_signup_help($path, $arg) {
  switch ($path) {
    case 'admin/help#convio_signup':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t("This module makes a new block available for admins to include on other pages. The block contains a simple form which will add an email address to the constituent database in Blackbaud's Convio Luminate Online product.") . '</p>';
      return $output;
  }
}

/**
 * Implements hook_permission().
 */
function convio_signup_permission() {
  return array(
    'administer convio signup' => array(
      'title' => t('Administer Convio Signup'),
      'description' => t('Perform administrative tasks on Convio Signup functionality.'),
    ),
  );
}

/**
 * Implements hook_block_configure.
 */
function convio_signup_block_configure($delta = '') {
  $form = array();

  switch ($delta) {
    case 'Convio Email Signup':

      $form['overview'] = array(
        '#markup' => t('This interface allows administrators to manage general Convio Email settings.'),
      );

      $form['convio_signup_clo_email_field_placeholder'] = array(
        '#title' => t('Email field placeholder'),
        '#description' => t("The text that displays inside the email field before the user enters their email address."),
        '#type' => 'textfield',
        '#default_value' => variable_get('convio_signup_default_placeholder'),
        '#size' => 30,
        '#maxlength' => 512,
      );

      $form['convio_signup_default_helper_text'] = array(
        '#title' => t('User Helper Text'),
        '#description' => t('Text that instucts the user how to use the form.'),
        '#type' => 'textfield',
        '#default_value' => variable_get('convio_signup_default_helper_text'),
        '#size' => 30,
        '#maxlength' => 255,
      );

      $form['convio_signup_submission_success_message'] = array(
        '#title' => t('Email submission success message:'),
        '#description' => t('Text that appears after the user successfully submits their email address. Defaults to "Thanks! We\'ll be in touch soon!"'),
        '#type' => 'textfield',
        '#default_value' => variable_get('convio_signup_submission_success_message'),
        '#attributes' => array(
          'placeholder' => "Thanks! We'll be in touch soon!",
        ),
        '#size' => 30,
        '#maxlength' => 255,
      );

      $form['convio_signup_submit_button_radio'] = array(
        '#title' => t("Choose the type of submit button:"),
        '#type' => 'radios',
        '#options' => array(
          t('Browser default submit button with custom text'),
          t('User supplied image and optional rollover'),
        ),
        '#default_value' => variable_get('convio_signup_submit_button_radio', 0),
      );

      $form['convio_signup_submit_button_text'] = array(
        '#title' => t("Submit button text"),
        '#description' => t("What should the button the user clicks to submit their email address say? Defaults to 'Submit'."),
        '#type' => 'textfield',
        '#default_value' => variable_get('convio_signup_submit_button_text'),
        '#size' => 30,
        '#maxlength' => 255,
        '#attributes' => array(
          'placeholder' => 'Submit',
        ),
        '#states' => array(
          'enabled' => array(
            ':input[name="convio_signup_submit_button_radio"]' => array('value' => 0),
          ),
        ),
      );

      $image_extensions = "png gif jpg gif";
      $form['convio_signup_submit_button_image'] = array(
        '#title' => t("Submit button image"),
        '#description' => t("Supply an image that will be used as the submit button for the form. Extensions allowed: $image_extensions."),
        '#type' => 'managed_file',
        '#default_value' => variable_get('convio_signup_submit_button_image'),
        '#progress_indicator' => "bar",
        '#upload_location' => "public://img/convio_signup",
        '#upload_validators' => array(
          'file_validate_extentions' => $image_extensions,
        ),
        '#states' => array(
          'enabled' => array(
            ':input[name="convio_signup_submit_button_radio"]' => array('value' => 1),
          ),
        ),
      );

      $form['convio_signup_submit_button_image_rollover'] = array(
        '#title' => t("Submit button rollover image"),
        '#description' => t("Supply a URL to an image that will be used as the rollover submit button for the form. Extensions allowed: $image_extensions."),
        '#type' => 'managed_file',
        '#default_value' => variable_get('convio_signup_submit_button_image_rollover'),
        '#progress_indicator' => "bar",
        '#upload_location' => "public://img/convio_signup",
        '#upload_validators' => array(
          'file_validate_extentions' => $image_extensions,
        ),
        '#states' => array(
          'enabled' => array(
            ':input[name="convio_signup_submit_button_radio"]' => array('value' => 1),
          ),
        ),
      );

      break;
  }

  return $form;
}


/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Adds validation of block configuration custom fields.
 */
function convio_signup_form_block_admin_configure_alter(&$form, &$form_state, $form_id) {
  if ($form['module']['#value'] == 'convio_signup') {
    $form['#validate'][] = 'convio_signup_admin_settings_form_validate';
  }
}

/**
 * Validates Convio Signup admin configuration form.
 */
function convio_signup_admin_settings_form_validate($form, &$form_state) {
  $delta = $form['delta']['#value'];

  switch ($delta) {
    case 'Convio Email Signup':
      if (($form_state['values']['convio_signup_submit_button_radio'] == 1) && empty($form_state['values']['convio_signup_submit_button_image'])) {
        form_set_error('convio_signup_submit_button_image', t('Please supply a submit button image!'));
      }
      break;
  }
}

/**
 * Implements hook_block_save().
 */
function convio_signup_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'Convio Email Signup':
      variable_set('convio_signup_default_placeholder', $edit['convio_signup_clo_email_field_placeholder']);
      variable_set('convio_signup_default_helper_text', $edit['convio_signup_default_helper_text']);
      variable_set('convio_signup_submission_success_message', $edit['convio_signup_submission_success_message']);
      variable_set('convio_signup_submit_button_text', $edit['convio_signup_submit_button_text']);
      variable_set('convio_signup_submit_button_radio', $edit['convio_signup_submit_button_radio']);

      $block = block_load('convio_signup', $delta);
      manage_file('convio_signup_submit_button_image', $edit, $block);
      manage_file('convio_signup_submit_button_image_rollover', $edit, $block);
  }
}

function manage_file($file_form_name, $edit, $block) {

  if (!empty($edit[$file_form_name])) {
    // The admin field was not empty, save the image.
    $file = file_load($edit[$file_form_name]);
    $file->status = FILE_STATUS_PERMANENT;
    file_save($file);
    variable_set($file_form_name, $file->fid);

    $references = file_usage_list($file);
    if (empty($references) || empty($references['convio_signup']['block'][$block->bid]) || $references['convio_signup']['block'][$block->bid] < 1) {
      file_usage_add($file, 'convio_signup', 'block', $block->bid);
    }
  }
  else {
    // The admin field was left blank, remove the references to the old image and delete  .
    remove_file_references($file_form_name);
  }
}
